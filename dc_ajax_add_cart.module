<?php

/**
 * @file
 * dc_ajax_add_cart.module.
 */

// Variable constants.
define('CHECKOUT_REDIRECT', 'dc_ajax_add_cart_checkout_redirect');
define('SHOW_LABELS', 'dc_ajax_add_cart_show_labels');
define('EMPTY_CART_MESSAGE', 'dc_ajax_add_cart_empty_cart_message');
define('REMOVE_CART', 'dc_ajax_add_cart_remove_cart');
define('DISPLAY_TAX', 'dc_ajax_add_cart_display_tax');

define('EMPTY_CART_TEASER_MESSAGE', 'dc_ajax_add_cart_empty_cart_teaser_message');
define('ITEM_SUFFIX_TEXT', 'dc_ajax_add_cart_item_suffix_text');

define('DISPLAY_POPUP', 'dc_ajax_add_cart_display_popup');
define('SUCCESS_MESSAGE', 'dc_ajax_add_cart_success_message');
define('POPUP_PRODUCT_NAME_DISPLAY', 'dc_ajax_add_cart_popup_product_name_display');
define('POPUP_PRODUCT_NAME_LABEL', 'dc_ajax_add_cart_popup_product_name_label');
define('POPUP_PRODUCT_QUANTITY_DISPLAY', 'dc_ajax_add_cart_popup_product_quantity_display');
define('POPUP_PRODUCT_QUANTITY_LABEL', 'dc_ajax_add_cart_popup_product_quantity_label');
define('POPUP_PRODUCT_PRICE_DISPLAY', 'dc_ajax_add_cart_popup_product_price_display');
define('POPUP_PRODUCT_PRICE_LABEL', 'dc_ajax_add_cart_popup_product_price_label');
define('POPUP_PRODUCT_TOTAL_DISPLAY', 'dc_ajax_add_cart_popup_product_total_display');
define('POPUP_PRODUCT_TOTAL_LABEL', 'dc_ajax_add_cart_popup_product_total_label');
define('POPUP_CHECKOUT', 'dc_ajax_add_cart_popup_checkout');
define('POPUP_CONTINUE_SHOPPING', 'dc_ajax_add_cart_popup_continue_shopping');

/**
 * Implements hook_init().
 */
function dc_ajax_add_cart_init() {
  // Add the Drupal AJAX library.
  drupal_add_library('system', 'drupal.ajax');
}

/**
 * Implements hook_permission().
 */
function dc_ajax_add_cart_permission() {
  return array(
    'administer commerce ajax add to cart' => array(
      'title' => t('Administer Commerce AJAX Add to Cart'),
      'description' => t('Administer Commerce AJAX Add to Cart'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dc_ajax_add_cart_menu() {
  $items = array();

  $items['remove-product/nojs/%'] = array(
    'title' => 'Remove commerce line item',
    'description' => 'Remove commerce line item',
    'page callback' => 'dc_ajax_add_cart_remove_commerce_line_item',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['remove-product/ajax/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['remove-product/nojs/%'];

  $items['admin/commerce/config/ajax-cart'] = array(
    'title' => 'AJAX Shopping Cart',
    'description' => 'AJAX Shopping Cart',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dc_ajax_add_cart_ajax_cart_settings_form'),
    'access arguments' => array('administer commerce ajax add to cart'),
    'file' => 'dc_ajax_add_cart.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
  );

  $items['admin/commerce/config/ajax-cart/default'] = array(
    'title' => 'General settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'dc_ajax_add_cart.admin.inc',
  );

  $items['admin/commerce/config/ajax-cart/cart-teaser'] = array(
    'title' => 'Shopping cart teaser',
    'description' => 'Shopping cart teaser',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dc_ajax_add_cart_cart_teaser_settings_form'),
    'access arguments' => array('administer commerce ajax add to cart'),
    'file' => 'dc_ajax_add_cart.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

  $items['admin/commerce/config/ajax-cart/pop-up-message'] = array(
    'title' => 'Pop up Message',
    'description' => 'Pop up Message',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dc_ajax_add_cart_popup_message_settings_form'),
    'access arguments' => array('administer commerce ajax add to cart'),
    'file' => 'dc_ajax_add_cart.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  return $items;
}

/**
 * This function removes the product item from cart.
 *
 * @param string $ajax
 *   Page argument, ajaxifies the removal of product from cart.
 *
 * @param int $line_item_id
 *   Line item ID.
 *
 * @return array
 *   Array containing data for ajaxification of product removal.
 */
function dc_ajax_add_cart_remove_commerce_line_item($ajax, $line_item_id) {
  // Initially quantity of products in cart will be zero.
  $quantity = 0;

  // Check whether this is AJAX callback.
  $is_ajax = $ajax === 'ajax';

  // Delete the product line item from cart.
  commerce_line_item_delete($line_item_id);

  // Get the current status of cart and other information.
  $commerce_cart = dc_ajax_add_cart_get_commerce_cart_details();
  $line_items = $commerce_cart['wrapper']->commerce_line_items;
  $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
  $total = commerce_line_items_total($line_items);

  if ($is_ajax) {
    // Update the cart content.
    $commands = array();

    // Check whether the user has any product in cart.
    $content_cart = theme('ajax_shopping_cart', array(
                                                    'order' => $commerce_cart['order'],
                                                    'line_items' => $line_items,
                                                    'quantity' => $quantity,
                                                    'total' => $total)
                                                  );
    $commands[] = ajax_command_replace('div.ajax-shopping-cart-wrapper', $content_cart);
    $content_teaser = theme('ajax_shopping_cart_teaser', array(
                                                            'order' => $commerce_cart['order'],
                                                            'quantity' => $quantity,
                                                            'total' => $total)
                                                          );
    $commands[] = ajax_command_replace('div.ajax-shopping-cart-teaser', $content_teaser);

    // Ajaxifies the updation of cart.
    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
  else {
    drupal_set_message(t('Product removed from cart'));
    drupal_goto();
  }
}

/**
 * Implements hook_form_alter().
 */
function dc_ajax_add_cart_form_alter(&$form, &$form_state, $form_id) {
  if (strstr($form_id, 'commerce_cart_add_to_cart_form')) {
    $form['submit']['#ajax'] = array(
      'callback' => 'dc_ajax_add_cart_ajax_cart_form',
      'method' => 'replace',
      'effect' => 'slide',
    );

    // Rebuild form.
    $form['#submit'][] = 'dc_ajax_add_cart_rebuild_add_to_cart_form';
  }
}

/**
 * Callback function to ajaxify the shopping cart.
 *
 * @param array $form
 *   Drupal form array.
 *
 * @param array $form_state
 *   Current form state.
 */
function dc_ajax_add_cart_ajax_cart_form(&$form, &$form_state) {
  // Get the current status of commerce cart.
  $commerce_cart = dc_ajax_add_cart_get_commerce_cart_details();

  // AJAX commands array.
  $commands = array();

  // Gather information to display product information in popup message.
  $last_line_item = $form_state['line_item'];
  $last_line_item_product = commerce_product_load($last_line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);
  $last_line_item_quantity = $form_state['values']['quantity'];

  // If the user has ordered items.
  if ($commerce_cart['order']) {
    // Get the line items in cart with their quantity and total.
    $line_items = $commerce_cart['wrapper']->commerce_line_items;
    $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
    $total = commerce_line_items_total($line_items);

    $ajax_shopping_cart_content = theme('ajax_shopping_cart', array(
                                                                    'order' => $commerce_cart['order'],
                                                                    'line_items' => $line_items,
                                                                    'quantity' => $quantity,
                                                                    'total' => $total)
                                                                  );
    $commands[] = ajax_command_replace('div.ajax-shopping-cart-wrapper', $ajax_shopping_cart_content);

    // Update the contents of shopping cart.
    $ajax_shopping_cart_teaser_content = theme('ajax_shopping_cart_teaser', array(
                                                                                  'order' => $commerce_cart['order'],
                                                                                  'quantity' => $quantity,
                                                                                  'total' => $total)
                                                                                );
    $commands[] = ajax_command_replace('div.ajax-shopping-cart-teaser', $ajax_shopping_cart_teaser_content);

    // Display add to cart message.
    if (variable_get(DISPLAY_POPUP, 'display_popup_message') == 'display_popup_message') {
      $content = theme('add_to_cart_message', array('line_item' => $last_line_item, 'product' => $last_line_item_product, 'quantity' => $last_line_item_quantity));
      $commands[] = ajax_command_prepend('body', $content);
    }

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
}

/**
 * Implements hook_block_info().
 */
function dc_ajax_add_cart_block_info() {
  $blocks['ajax_shopping_cart'] = array(
    'info' => t('AJAX shopping cart'),
  );

  $blocks['ajax_shopping_cart_teaser'] = array(
    'info' => t('AJAX shopping cart teaser'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dc_ajax_add_cart_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ajax_shopping_cart':
      $block['subject'] = t('Shopping cart');
      $block['content'] = dc_ajax_add_cart_get_shopping_cart();
      break;

    case 'ajax_shopping_cart_teaser':
      $block['content'] = dc_ajax_add_cart_get_shopping_cart_teaser();
      break;
  }

  return $block;
}

/**
 * Render the shopping cart.
 */
function dc_ajax_add_cart_get_shopping_cart() {
  // Get the current status of cart and other details.
  $commerce_cart = dc_ajax_add_cart_get_commerce_cart_details();

  if ($commerce_cart['order']) {
    $line_items = $commerce_cart['wrapper']->commerce_line_items;
    $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
    $total = commerce_line_items_total($line_items);
  }
  else {
    $line_items = NULL;
    $quantity = 0;
    $total = NULL;
  }

  $content = theme('ajax_shopping_cart', array(
                                              'order' => $commerce_cart['order'],
                                              'line_items' => $line_items,
                                              'quantity' => $quantity,
                                              'total' => $total)
                                          );

  return $content;
}

/**
 * Render the shopping cart teaser.
 *
 * @return string
 *   HTML string containing themed output.
 */
function dc_ajax_add_cart_get_shopping_cart_teaser() {
  // Get the current status of cart and other details.
  $commerce_cart = dc_ajax_add_cart_get_commerce_cart_details();

  if ($commerce_cart['order']) {
    $line_items = $commerce_cart['wrapper']->commerce_line_items;
    $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
    $total = commerce_line_items_total($line_items);
  }
  else {
    $line_items = NULL;
    $quantity = 0;
    $total = NULL;
  }

  $content = theme('ajax_shopping_cart_teaser', array(
                                                    'order' => $commerce_cart['order'],
                                                    'quantity' => $quantity,
                                                    'total' => $total)
                                                  );

  return $content;
}

/**
 * This function returns the current status of cart.
 *
 * @return array
 *   Array containing the current status of cart.
 */
function dc_ajax_add_cart_get_commerce_cart_details() {
  global $user;
  $output = array();

  $order = commerce_cart_order_load($user->uid);

  if ($order) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    $output['order'] = $order;
    $output['wrapper'] = $wrapper;
  }
  else {
    $output['order'] = NULL;
    $output['wrapper'] = NULL;
  }

  return $output;
}

/**
 * Implements hook_theme().
 */
function dc_ajax_add_cart_theme($existing, $type, $theme, $path) {
  return array(
    'ajax_shopping_cart' => array(
      'variables' => array(
        'order' => NULL,
        'line_items' => NULL,
        'quantity' => NULL,
        'total' => NULL,
      ),
      'template' => 'templates/ajax-shopping-cart',
    ),
    'ajax_shopping_cart_teaser' => array(
      'variables' => array('order' => NULL, 'quantity' => NULL, 'total' => NULL),
      'template' => 'templates/ajax-shopping-cart-teaser',
    ),
    'add_to_cart_message' => array(
      'variables' => array('line_item' => NULL, 'product' => NULL, 'quantity' => NULL),
      'template' => 'templates/add-to-cart-message',
    ),
  );
}

/**
 * Template preprocess function for ajax shopping cart block.
 *
 * @param array $variables
 *   Theme variable array.
 *
 * @return array
 *   Theme variable array.
 */
function template_preprocess_ajax_shopping_cart(&$variables) {
  // Check whether order object exists.
  if ($variables['order']) {
    $header = array();
    $row = array();

    // Default currency array.
    $currency = commerce_currency_load(commerce_default_currency());

    // Output arrays.
    $line_item_list = array();
    $products = array();
    $product_prices = array();
    $shipping = array();

    $product_price_total = commerce_currency_format($variables['total']['amount'], $currency['code']);

    // Create the line item list and products array.
    foreach ($variables['line_items'] as $line_item_wrapper) {
      $line_item = $line_item_wrapper->value();

      // If the line item is a product.
      if (property_exists($line_item, 'commerce_product')) {
        $product = commerce_product_load($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);
        $products[$product->product_id] = $product;
      }
      // If line item is shipping service.
      elseif (property_exists($line_item, 'commerce_shipping_service')) {
        $shipping['service'] = $line_item->line_item_label;
        $shipping['price'] = commerce_currency_format($line_item->commerce_unit_price[LANGUAGE_NONE][0]['amount'], $currency['code']);
      }

      $line_item_list[$line_item->line_item_id] = $line_item;
    }

    // Create the currency array.
    foreach ($products as $product) {
      $product_prices[$product->product_id] = commerce_currency_format($product->commerce_price[LANGUAGE_NONE][0]['amount'], $currency['code']);
    }

    // Create checkout url.
    if (variable_get(CHECKOUT_REDIRECT, 'cart_page') == 'cart_page') {
      $checkout_url = l(t('Checkout'), 'cart');
    }
    else {
      $checkout_url = l(t('Checkout'), 'checkout');
    }

    // Shopping cart.
    if (variable_get(SHOW_LABELS, 'label')  == 'label') {
      $header = array(
        array('data' => t('Quantity'), 'class' => array('quantity-label')),
        array('data' => t('Items'), 'class' => array('item-label')),
        array('data' => t('Price'), 'class' => array('price-label')),
        '',
      );
    }

    foreach ($line_item_list as $line_item) {
      if (property_exists($line_item, 'commerce_product')) {
        $product = commerce_product_load($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);

        $row[] = array(
          array('data' => intval($line_item->quantity), 'class' => array('quantity')),
          array('data' => $product->title, 'class' => array('name')),
          array('data' => $product_prices[$product->product_id], 'class' => array('price')),
          array('data' => l(variable_get(REMOVE_CART, 'link') == 'link' ? t('Remove from cart') : '<img src="' . base_path() . drupal_get_path('module', 'dc_ajax_add_cart') . '/images/remove-from-cart.png' . '" />', 'remove-product/nojs/' . $line_item->line_item_id, array('attributes' => array('class' => array('use-ajax')), 'html' => TRUE)), 'class' => array('remove-from-cart'))
        );
      }
    }

    // Create new theme variables.
    $variables['line_item_list'] = $line_item_list;
    $variables['products'] = $products;
    $variables['product_prices'] = $product_prices;
    $variables['product_price_total'] = $product_price_total;
    $variables['checkout_url'] = $checkout_url;
    $variables['products_list_html'] = theme('table', array('header' => $header, 'rows' => $row, 'attributes' => array('class' => array('ajax-shopping-cart-table')), 'sticky' => FALSE));
    if (!empty($shipping)) {
      $variables['shipping'] = $shipping;
    }
  }

  // Create new theme variables related to configuration.
  $variables['configuration']['show_labels'] = variable_get(SHOW_LABELS, 'label');
  $variables['configuration']['remove_cart'] = variable_get(REMOVE_CART, 'link');
  $variables['configuration']['display_tax'] = variable_get(DISPLAY_TAX, 'no_display');
  $variables['configuration']['empty_cart_message'] = variable_get(EMPTY_CART_MESSAGE, 'Shopping cart is empty');
}

/**
 * Template preprocess function for ajax shopping cart teaser.
 *
 * @param array $variables
 *   Theme variable array.
 *
 * @return array
 *   Theme variable array.
 */
function template_preprocess_ajax_shopping_cart_teaser(&$variables) {
  // Default currency array.
  $currency = commerce_currency_load(commerce_default_currency());

  $variables['total_amount'] = commerce_currency_format($variables['total']['amount'], $currency['code']);

  // Create new theme variables related to configuration.
  $variables['configuration']['item_suffix_text'] = variable_get(ITEM_SUFFIX_TEXT, 'item');
  $variables['configuration']['empty_cart_teaser_message'] = variable_get(EMPTY_CART_TEASER_MESSAGE, 'Empty');
}

/**
 * Template preprocess function for add to cart message popup.
 *
 * @param array $variables
 *   Theme variable array.
 *
 * @return array
 *   Theme variable array.
 */
function template_preprocess_add_to_cart_message(&$variables) {
  // Default currency array.
  $currency = commerce_currency_load(commerce_default_currency());

  $variables['product_per_unit_price'] = commerce_currency_format($variables['line_item']->commerce_unit_price[LANGUAGE_NONE][0]['amount'], $currency['code']);
  $variables['product_price_total'] = commerce_currency_format($variables['quantity'] * $variables['line_item']->commerce_unit_price[LANGUAGE_NONE][0]['amount'], $currency['code']);

  // Create new theme variables related to configuration.
  $variables['configuration']['success_message'] = variable_get(SUCCESS_MESSAGE, 'Item successfully added to cart');
  $variables['configuration']['popup_checkout'] = variable_get(POPUP_CHECKOUT, 'Go to checkout');
  $variables['configuration']['popup_continue_shopping'] = variable_get(POPUP_CONTINUE_SHOPPING, 'Continue shopping');
  $variables['configuration']['popup_product_name_display'] = variable_get(POPUP_PRODUCT_NAME_DISPLAY, 1);
  $variables['configuration']['popup_product_name_label'] = variable_get(POPUP_PRODUCT_NAME_LABEL, 'no_display_label');
  $variables['configuration']['popup_product_price_display'] = variable_get(POPUP_PRODUCT_PRICE_DISPLAY, 1);
  $variables['configuration']['popup_product_price_label'] = variable_get(POPUP_PRODUCT_PRICE_LABEL, 'display_label');
  $variables['configuration']['popup_product_quantity_display'] = variable_get(POPUP_PRODUCT_QUANTITY_DISPLAY, 1);
  $variables['configuration']['popup_product_quantity_label'] = variable_get(POPUP_PRODUCT_QUANTITY_LABEL, 'display_label');
  $variables['configuration']['popup_product_total_display'] = variable_get(POPUP_PRODUCT_TOTAL_DISPLAY, 1);
  $variables['configuration']['popup_product_total_label'] = variable_get(POPUP_PRODUCT_TOTAL_LABEL, 'display_label');
}

/**
 * Rebuild add to cart form.
 *
 * @param array $form
 *   Drupal form array.
 * @param array $form_state
 *   Drupal form state array.
 */
function dc_ajax_add_cart_rebuild_add_to_cart_form($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['input'] = array();
}
